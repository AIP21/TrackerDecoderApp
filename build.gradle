import proguard.gradle.ProGuardTask

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        google()
    }

    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.1.0'
    }
}

plugins {
    id 'java'
    id "application"
    id 'edu.sc.seis.launch4j' version '2.5.3'
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

repositories {
    mavenCentral()
    google()
    maven {
        url "https://maven.latticg.com/"
    }
    maven {
        url "https://maven.seedfinding.com/"
    }
    maven {
        url "https://maven-snapshots.seedfinding.com/"
    }
}

defaultTasks("clean","release")

java {
    // very important ByteBuffer does not have flip in java 1.8
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
    }
}

task proguard(type: ProGuardTask) {
    // Specify the input jars, output jars, and library jars.
    injars  'build/libs/${project.name}-${project.version}-FR.jar'
    outjars 'build/libs/${project.name}-${project.version}-FR.out.jar'

    // Save the obfuscation mapping to a file, so you can de-obfuscate any stack
    // traces later on. Keep a fixed source file attribute and all line number
    // tables to get line numbers in the stack traces.
    // You can comment this out if you're not interested in stack traces.
    printmapping 'out.map'
    renamesourcefileattribute 'SourceFile'
    keepattributes 'SourceFile,LineNumberTable'

    // Preserve all annotations.
    keepattributes '*Annotation*'

    // Preserve all public applications.
    keepclasseswithmembers 'public class * { \
        public static void main(java.lang.String[]); \
    }'

    // Preserve all native method names and the names of their classes.
    keepclasseswithmembernames includedescriptorclasses: true, 'class * { \
        native <methods>; \
    }'

    // Preserve the special static methods that are required in all enumeration
    // classes.
    keepclassmembers allowoptimization: true, 'enum * { \
        public static **[] values(); \
        public static ** valueOf(java.lang.String); \
    }'

    // Explicitly preserve all serialization members. The Serializable interface
    // is only a marker interface, so it wouldn't save them.
    // You can comment this out if your application doesn't use serialization.
    // If your code contains serializable classes that have to be backward
    // compatible, please refer to the manual.
    keepclassmembers 'class * implements java.io.Serializable { \
        static final long serialVersionUID; \
        static final java.io.ObjectStreamField[] serialPersistentFields; \
        private void writeObject(java.io.ObjectOutputStream); \
        private void readObject(java.io.ObjectInputStream); \
        java.lang.Object writeReplace(); \
        java.lang.Object readResolve(); \
    }'

    // Your application may contain more items that need to be preserved;
    // typically classes that are dynamically created using Class.forName:
    keep 'class org.jetbrains.annotations.** { *; }'
    dontwarn 'org.jetbrains.annotations.**'
    dontwarn "sun.misc.Unsafe"
    dontwarn "javax.annotation.**"
}

task("release"){
    dependsOn(clean)
    dependsOn(shadowJar)
    dependsOn(createExe)
}

run {
    args "-no-update"
}

dependencies {
    implementation('com.seedfinding:mc_math:d73ac7cc644c67628ade0effd7136e11eb00bb76') { transitive = false }
    implementation('com.seedfinding:mc_seed:5518e3ba3ee567fb0b51c15958967f70a6a19e02') { transitive = false }
    implementation('com.seedfinding:mc_core:706e4f1b7aa6b42b3627f682a311d06280d80b5c') { transitive = false }
    implementation('com.seedfinding:mc_noise:a6ab8e6c688491829f8d2adf845392da22ef8e9c') { transitive = false }
    implementation('com.seedfinding:mc_biome:b2271807a047bb43ac60c8c20ad47e315f19b9a6') { transitive = false }
    implementation('com.seedfinding:mc_terrain:9e937ddb838e28e79423c287fa18b1ce66f061d7') { transitive = false }

    implementation('com.seedfinding:latticg:1.06')

    implementation('com.formdev:flatlaf:2.3')
    implementation('com.google.code.gson:gson:2.9.0')
}

application {
    mainClass.set("src.WAT-Vis.main.PlayerTrackerDecoder")
}

shadowJar {
    archiveFileName = "${project.name}-${project.version}-FR.jar"
}

launch4j {
    outfile = "${project.name}-${project.version}-FR.exe"
    icon = "${projectDir}/icon.ico"
    outputDir = "libs"
    supportUrl = "https://github.com/AIP21/WAT-Vis/issues"
    jvmOptions = ["-Xms1G", "-Xmx8G"]
    initialHeapPercent = 5
    maxHeapPercent = 80
    jarTask = project.tasks.shadowJar
    productName = "WAT:Vis"
    fileDescription = "A tool for game developers and server owners to decode, visualize, and analyze player positional data."
    copyConfigurable = []
    libraryDir= "ignore_libs"
    jreMaxVersion=JavaVersion.VERSION_HIGHER
    jreMinVersion=JavaVersion.VERSION_1_8
    bundledJrePath ="%JAVA_HOME%;%PATH%"
}