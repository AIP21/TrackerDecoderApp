plugins {
    id 'java'
    id 'application'

    id "org.panteleyev.jpackageplugin" version "1.3.1"
}

group 'com.anipgames'
version '1.5.0'

repositories {
    mavenCentral()
    maven {
        url "https://maven.latticg.com/"
    }
    maven {
        url "https://maven.seedfinding.com/"
    }
    maven {
        url "https://maven-snapshots.seedfinding.com/"
    }
}

dependencies {
    implementation 'com.formdev:flatlaf:2.3'
    implementation 'com.google.code.gson:gson:2.9.0'

    implementation('com.seedfinding:mc_math:d73ac7cc644c67628ade0effd7136e11eb00bb76') { transitive = false }
    implementation('com.seedfinding:mc_seed:5518e3ba3ee567fb0b51c15958967f70a6a19e02') { transitive = false }
    implementation('com.seedfinding:mc_core:706e4f1b7aa6b42b3627f682a311d06280d80b5c') { transitive = false }
    implementation('com.seedfinding:mc_noise:a6ab8e6c688491829f8d2adf845392da22ef8e9c') { transitive = false }
    implementation('com.seedfinding:mc_biome:b2271807a047bb43ac60c8c20ad47e315f19b9a6') { transitive = false }
    implementation('com.seedfinding:mc_terrain:9e937ddb838e28e79423c287fa18b1ce66f061d7') { transitive = false }

    implementation('com.seedfinding:latticg:1.06')
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'commons-io:commons-io:2.11.0'

    implementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'

    testImplementation 'junit:junit:4.13.2'
    implementation 'junit:junit:4.13.2'
}

test {
    useJUnitPlatform()
}

java {
    // very important ByteBuffer does not have flip in java 1.8
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(16))
    }
}

application {
    mainClassName = 'com.anipgames.WAT_Vis.PlayerTrackerDecoder'
}

jar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    exclude 'LICENSE.txt'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/LICENSE.txt'
    exclude 'NOTICE.txt'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/NOTICE.txt'

    manifest {
        attributes "Main-Class": "com.anipgames.WAT_Vis.PlayerTrackerDecoder"
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

run {
    args "-no-update"
}

task copyDependencies(type: Copy) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    from(configurations.runtimeClasspath).into("$buildDir/jmods")
}

task copyJar(type: Copy) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    from(tasks.jar).into("$buildDir/jmods")
}

tasks.jpackage {
    dependsOn("build", "copyDependencies", "copyJar")

    appName = "WAT:Vis"
    appDescription = "A tool for game developers and server owners to decode, visualize, and analyze player positional data."
    appVersion = project.version.toString()
    vendor = "Anip Games (Alexander Irausquin-Petit)"
    copyright = "Copyright Â© 2022 Alexander Irausquin-Petit"
    runtimeImage = System.getProperty("java.home")
    module = "com.anipgames.WAT_Vis/com.anipgames.WAT_Vis.PlayerTrackerDecoder"
    modulePaths = Arrays.asList(file("$buildDir/jmods"))
    destination = "$buildDir/dist"
    javaOptions = Arrays.asList("-Dfile.encoding=UTF-8")

    mac {
        icon = "icons/icons.icns"
    }

    windows {
        icon = "icons/icons.ico"
        winMenu = true
        winDirChooser = true
    }
}

/*
type	ImageType	--type <type>
appName	String	--name <name>
appVersion	String	--app-version <version>
copyright	String	--copyright <copyright string>
appDescription	String	--description <description string>
vendor	String	--vendor <vendor string>
installDir	String	--install-dir <file path>
module	String	--module <module name>[/<main class>]
mainClass	String	--main-class <class name>
mainJar	String	--main-jar <main jar file>
verbose	Boolean	--verbose
arguments	String	--arguments <main class arguments>
addModules	String	--add-modules <module>[,<module>]
appImage	String (*)	--app-image <name>
destination	String (*)	--dest <destination path>
fileAssociations	String (*)	--file-associations <file association property file>
icon	String (*)	--icon <icon file path>
input	String (*)	--input <input path>
licenseFile	String (*)	--license-file <license file path>
modulePaths	String (*)	--module-path <module path>
resourceDir	String (*)	--resource-dir <resource dir path>
runtimeImage	String (*)	--runtime-image <file path>
temp	String (*)	--temp <temp dir path>
launchers	Launcher (*)	--add-launcher <name>=<property file>
 */