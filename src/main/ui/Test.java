package src.main.ui;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

public class Test {
    public JPanel ImportForm;
    public JPanel BottomPanel;
    public JLabel Title;
    public JPanel FileSelectorPanel;
    public JButton AddFile;
    public JButton RemoveFile;
    public JLabel FileSelectorTitle;
    public JPanel SelectorButtons;
    public JButton appendButton;
    public JButton cancelButton;
    public JPanel ConfirmationButtonPanel;
    public JRadioButton convertChunksToggle;
    public JRadioButton fancyRenderingToggle;
    public JSplitPane MainSplitPane;
    public JSpinner MaxEntriesSelector;
    public JLabel MaxEntriesSelectorLabel;
    public JLabel ConvertChunksLabel;
    public JSpinner imageYOffsetSpinner;
    public JSpinner imageXOffsetSpinner;
    public JButton AddWorldImageButton;
    public JLabel fancyRenderingLabel;
    public JLabel WIXOffset;
    public JLabel WIZOffset;
    public JLabel WorldImageLabel;
    public JList SelectedFileList;
    public JScrollPane SelectedFileListScrollPane;
    public JComboBox DimensionChooser;
    public JLabel DimensionChooserLabel;
    public JPanel mainSettings;
    public JPanel mapSettings;
    public JTabbedPane settingsTabs;
    public JPanel importSettingsPanel;
    public JLabel importSettingsTitle;
    public JComboBox backgroundTypeChooser;
    public JLabel backgroundTypeLabel;
    public JTextField worldSeedTextField;
    public JLabel worldSeedLabel;
    public JButton overwriteButton;
    public JComboBox comboBox1;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        ImportForm = new JPanel();
        ImportForm.setLayout(new BorderLayout(0, 0));
        BottomPanel = new JPanel();
        BottomPanel.setLayout(new GridBagLayout());
        ImportForm.add(BottomPanel, BorderLayout.SOUTH);
        ConfirmationButtonPanel = new JPanel();
        ConfirmationButtonPanel.setLayout(new GridBagLayout());
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(6, 6, 6, 6);
        BottomPanel.add(ConfirmationButtonPanel, gbc);
        cancelButton = new JButton();
        cancelButton.setText("Cancel");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 0.1;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        ConfirmationButtonPanel.add(cancelButton, gbc);
        appendButton = new JButton();
        appendButton.setHideActionText(false);
        appendButton.setOpaque(false);
        appendButton.setRolloverEnabled(true);
        appendButton.setSelected(true);
        appendButton.setText("Append");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 0.1;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        ConfirmationButtonPanel.add(appendButton, gbc);
        overwriteButton = new JButton();
        overwriteButton.setText("Overwrite");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.weightx = 0.1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        ConfirmationButtonPanel.add(overwriteButton, gbc);
        Title = new JLabel();
        Title.setEnabled(true);
        Font TitleFont = this.$$$getFont$$$(null, -1, 26, Title.getFont());
        if (TitleFont != null) Title.setFont(TitleFont);
        Title.setHorizontalAlignment(0);
        Title.setHorizontalTextPosition(0);
        Title.setText("Import Files");
        ImportForm.add(Title, BorderLayout.NORTH);
        MainSplitPane = new JSplitPane();
        MainSplitPane.setContinuousLayout(true);
        MainSplitPane.setDividerLocation(244);
        MainSplitPane.setDividerSize(9);
        MainSplitPane.setEnabled(true);
        ImportForm.add(MainSplitPane, BorderLayout.CENTER);
        FileSelectorPanel = new JPanel();
        FileSelectorPanel.setLayout(new GridBagLayout());
        MainSplitPane.setRightComponent(FileSelectorPanel);
        SelectorButtons = new JPanel();
        SelectorButtons.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(3, 3, 3, 3);
        FileSelectorPanel.add(SelectorButtons, gbc);
        AddFile = new JButton();
        AddFile.setText("Add");
        AddFile.setToolTipText("Add Files");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        SelectorButtons.add(AddFile, gbc);
        RemoveFile = new JButton();
        RemoveFile.setText("Remove");
        RemoveFile.setToolTipText("Remove Files");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        SelectorButtons.add(RemoveFile, gbc);
        FileSelectorTitle = new JLabel();
        Font FileSelectorTitleFont = this.$$$getFont$$$(null, -1, 16, FileSelectorTitle.getFont());
        if (FileSelectorTitleFont != null) FileSelectorTitle.setFont(FileSelectorTitleFont);
        FileSelectorTitle.setText("Select Files");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        FileSelectorPanel.add(FileSelectorTitle, gbc);
        SelectedFileListScrollPane = new JScrollPane();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(3, 3, 3, 3);
        FileSelectorPanel.add(SelectedFileListScrollPane, gbc);
        SelectedFileList = new JList();
        SelectedFileListScrollPane.setViewportView(SelectedFileList);
        importSettingsPanel = new JPanel();
        importSettingsPanel.setLayout(new BorderLayout(0, 0));
        MainSplitPane.setLeftComponent(importSettingsPanel);
        importSettingsTitle = new JLabel();
        Font importSettingsTitleFont = this.$$$getFont$$$(null, -1, 16, importSettingsTitle.getFont());
        if (importSettingsTitleFont != null) importSettingsTitle.setFont(importSettingsTitleFont);
        importSettingsTitle.setHorizontalAlignment(0);
        importSettingsTitle.setText("Import Settings");
        importSettingsPanel.add(importSettingsTitle, BorderLayout.NORTH);
        settingsTabs = new JTabbedPane();
        settingsTabs.setTabLayoutPolicy(0);
        settingsTabs.setTabPlacement(1);
        importSettingsPanel.add(settingsTabs, BorderLayout.CENTER);
        mainSettings = new JPanel();
        mainSettings.setLayout(new GridBagLayout());
        settingsTabs.addTab("Main", mainSettings);
        convertChunksToggle = new JRadioButton();
        convertChunksToggle.setHideActionText(false);
        convertChunksToggle.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        mainSettings.add(convertChunksToggle, gbc);
        fancyRenderingToggle = new JRadioButton();
        fancyRenderingToggle.setHideActionText(true);
        fancyRenderingToggle.setSelected(true);
        fancyRenderingToggle.setText("");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        mainSettings.add(fancyRenderingToggle, gbc);
        ConvertChunksLabel = new JLabel();
        ConvertChunksLabel.setText(" Convert Chunks");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        mainSettings.add(ConvertChunksLabel, gbc);
        fancyRenderingLabel = new JLabel();
        fancyRenderingLabel.setText("Fancy Rendering");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        mainSettings.add(fancyRenderingLabel, gbc);
        MaxEntriesSelector = new JSpinner();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainSettings.add(MaxEntriesSelector, gbc);
        MaxEntriesSelectorLabel = new JLabel();
        MaxEntriesSelectorLabel.setText("Max Entries To Decode");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        mainSettings.add(MaxEntriesSelectorLabel, gbc);
        mapSettings = new JPanel();
        mapSettings.setLayout(new GridBagLayout());
        settingsTabs.addTab("Background", mapSettings);
        DimensionChooserLabel = new JLabel();
        DimensionChooserLabel.setText("Dimension");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        mapSettings.add(DimensionChooserLabel, gbc);
        DimensionChooser = new JComboBox();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mapSettings.add(DimensionChooser, gbc);
        backgroundTypeChooser = new JComboBox();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mapSettings.add(backgroundTypeChooser, gbc);
        backgroundTypeLabel = new JLabel();
        backgroundTypeLabel.setText("Background Type");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.ipadx = 20;
        gbc.insets = new Insets(0, 3, 0, 0);
        mapSettings.add(backgroundTypeLabel, gbc);
        worldSeedTextField = new JTextField();
        worldSeedTextField.setText("");
        worldSeedTextField.setToolTipText("seed");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(3, 3, 3, 3);
        mapSettings.add(worldSeedTextField, gbc);
        worldSeedLabel = new JLabel();
        worldSeedLabel.setText("World Seed");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        mapSettings.add(worldSeedLabel, gbc);
        WorldImageLabel = new JLabel();
        WorldImageLabel.setText(" World Image");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        mapSettings.add(WorldImageLabel, gbc);
        WIZOffset = new JLabel();
        WIZOffset.setText("Image X Offset");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 5;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        mapSettings.add(WIZOffset, gbc);
        AddWorldImageButton = new JButton();
        AddWorldImageButton.setText("Add World Image");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 4;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mapSettings.add(AddWorldImageButton, gbc);
        imageXOffsetSpinner = new JSpinner();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 5;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mapSettings.add(imageXOffsetSpinner, gbc);
        imageYOffsetSpinner = new JSpinner();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 6;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mapSettings.add(imageYOffsetSpinner, gbc);
        WIXOffset = new JLabel();
        WIXOffset.setText("Image Y Offset");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 6;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        mapSettings.add(WIXOffset, gbc);
        comboBox1 = new JComboBox();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mapSettings.add(comboBox1, gbc);
        final JLabel label1 = new JLabel();
        label1.setText("World Seed");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        mapSettings.add(label1, gbc);
        MaxEntriesSelectorLabel.setLabelFor(MaxEntriesSelector);
        WIZOffset.setLabelFor(imageXOffsetSpinner);
        WIXOffset.setLabelFor(imageYOffsetSpinner);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return ImportForm;
    }

    private void createUIComponents() {
        // place custom component creation code here
    }
}
